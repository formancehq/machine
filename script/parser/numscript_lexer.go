// Code generated from NumScript.g4 by ANTLR 4.9.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 34, 244,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 4, 29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33,
	3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 6, 5, 76, 10, 5, 13, 5,
	14, 5, 77, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7,
	3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9,
	3, 9, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 11, 3, 11, 3,
	11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 11, 3, 12,
	3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 13, 3, 13, 3,
	14, 3, 14, 3, 15, 3, 15, 3, 16, 3, 16, 3, 17, 3, 17, 3, 18, 3, 18, 3, 19,
	3, 19, 3, 20, 3, 20, 3, 21, 3, 21, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3,
	23, 3, 23, 3, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24, 3, 24,
	3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 26, 3, 26, 3, 26, 3,
	26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 27, 6, 27, 182, 10, 27, 13, 27,
	14, 27, 183, 3, 27, 7, 27, 187, 10, 27, 12, 27, 14, 27, 190, 11, 27, 3,
	27, 3, 27, 7, 27, 194, 10, 27, 12, 27, 14, 27, 197, 11, 27, 3, 27, 6, 27,
	200, 10, 27, 13, 27, 14, 27, 201, 3, 28, 6, 28, 205, 10, 28, 13, 28, 14,
	28, 206, 3, 29, 3, 29, 3, 30, 6, 30, 212, 10, 30, 13, 30, 14, 30, 213,
	3, 31, 3, 31, 6, 31, 218, 10, 31, 13, 31, 14, 31, 219, 3, 31, 7, 31, 223,
	10, 31, 12, 31, 14, 31, 226, 11, 31, 3, 32, 3, 32, 6, 32, 230, 10, 32,
	13, 32, 14, 32, 231, 3, 32, 7, 32, 235, 10, 32, 12, 32, 14, 32, 238, 11,
	32, 3, 33, 6, 33, 241, 10, 33, 13, 33, 14, 33, 242, 2, 2, 34, 3, 3, 5,
	4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25,
	14, 27, 15, 29, 16, 31, 17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 22, 43,
	23, 45, 24, 47, 25, 49, 26, 51, 27, 53, 28, 55, 29, 57, 30, 59, 31, 61,
	32, 63, 33, 65, 34, 3, 2, 10, 4, 2, 12, 12, 15, 15, 4, 2, 11, 11, 34, 34,
	3, 2, 50, 59, 3, 2, 34, 34, 5, 2, 50, 60, 97, 97, 99, 124, 4, 2, 97, 97,
	99, 124, 5, 2, 50, 59, 97, 97, 99, 124, 4, 2, 49, 59, 67, 92, 2, 255, 2,
	3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2,
	11, 3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2,
	2, 19, 3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2,
	2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2,
	2, 2, 2, 35, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3,
	2, 2, 2, 2, 43, 3, 2, 2, 2, 2, 45, 3, 2, 2, 2, 2, 47, 3, 2, 2, 2, 2, 49,
	3, 2, 2, 2, 2, 51, 3, 2, 2, 2, 2, 53, 3, 2, 2, 2, 2, 55, 3, 2, 2, 2, 2,
	57, 3, 2, 2, 2, 2, 59, 3, 2, 2, 2, 2, 61, 3, 2, 2, 2, 2, 63, 3, 2, 2, 2,
	2, 65, 3, 2, 2, 2, 3, 67, 3, 2, 2, 2, 5, 69, 3, 2, 2, 2, 7, 72, 3, 2, 2,
	2, 9, 75, 3, 2, 2, 2, 11, 81, 3, 2, 2, 2, 13, 86, 3, 2, 2, 2, 15, 92, 3,
	2, 2, 2, 17, 97, 3, 2, 2, 2, 19, 102, 3, 2, 2, 2, 21, 109, 3, 2, 2, 2,
	23, 121, 3, 2, 2, 2, 25, 130, 3, 2, 2, 2, 27, 132, 3, 2, 2, 2, 29, 134,
	3, 2, 2, 2, 31, 136, 3, 2, 2, 2, 33, 138, 3, 2, 2, 2, 35, 140, 3, 2, 2,
	2, 37, 142, 3, 2, 2, 2, 39, 144, 3, 2, 2, 2, 41, 146, 3, 2, 2, 2, 43, 148,
	3, 2, 2, 2, 45, 150, 3, 2, 2, 2, 47, 158, 3, 2, 2, 2, 49, 164, 3, 2, 2,
	2, 51, 171, 3, 2, 2, 2, 53, 181, 3, 2, 2, 2, 55, 204, 3, 2, 2, 2, 57, 208,
	3, 2, 2, 2, 59, 211, 3, 2, 2, 2, 61, 215, 3, 2, 2, 2, 63, 227, 3, 2, 2,
	2, 65, 240, 3, 2, 2, 2, 67, 68, 7, 48, 2, 2, 68, 4, 3, 2, 2, 2, 69, 70,
	7, 118, 2, 2, 70, 71, 7, 113, 2, 2, 71, 6, 3, 2, 2, 2, 72, 73, 9, 2, 2,
	2, 73, 8, 3, 2, 2, 2, 74, 76, 9, 3, 2, 2, 75, 74, 3, 2, 2, 2, 76, 77, 3,
	2, 2, 2, 77, 75, 3, 2, 2, 2, 77, 78, 3, 2, 2, 2, 78, 79, 3, 2, 2, 2, 79,
	80, 8, 5, 2, 2, 80, 10, 3, 2, 2, 2, 81, 82, 7, 120, 2, 2, 82, 83, 7, 99,
	2, 2, 83, 84, 7, 116, 2, 2, 84, 85, 7, 117, 2, 2, 85, 12, 3, 2, 2, 2, 86,
	87, 7, 114, 2, 2, 87, 88, 7, 116, 2, 2, 88, 89, 7, 107, 2, 2, 89, 90, 7,
	112, 2, 2, 90, 91, 7, 118, 2, 2, 91, 14, 3, 2, 2, 2, 92, 93, 7, 104, 2,
	2, 93, 94, 7, 99, 2, 2, 94, 95, 7, 107, 2, 2, 95, 96, 7, 110, 2, 2, 96,
	16, 3, 2, 2, 2, 97, 98, 7, 117, 2, 2, 98, 99, 7, 103, 2, 2, 99, 100, 7,
	112, 2, 2, 100, 101, 7, 102, 2, 2, 101, 18, 3, 2, 2, 2, 102, 103, 7, 117,
	2, 2, 103, 104, 7, 113, 2, 2, 104, 105, 7, 119, 2, 2, 105, 106, 7, 116,
	2, 2, 106, 107, 7, 101, 2, 2, 107, 108, 7, 103, 2, 2, 108, 20, 3, 2, 2,
	2, 109, 110, 7, 102, 2, 2, 110, 111, 7, 103, 2, 2, 111, 112, 7, 117, 2,
	2, 112, 113, 7, 118, 2, 2, 113, 114, 7, 107, 2, 2, 114, 115, 7, 112, 2,
	2, 115, 116, 7, 99, 2, 2, 116, 117, 7, 118, 2, 2, 117, 118, 7, 107, 2,
	2, 118, 119, 7, 113, 2, 2, 119, 120, 7, 112, 2, 2, 120, 22, 3, 2, 2, 2,
	121, 122, 7, 99, 2, 2, 122, 123, 7, 110, 2, 2, 123, 124, 7, 110, 2, 2,
	124, 125, 7, 113, 2, 2, 125, 126, 7, 101, 2, 2, 126, 127, 7, 99, 2, 2,
	127, 128, 7, 118, 2, 2, 128, 129, 7, 103, 2, 2, 129, 24, 3, 2, 2, 2, 130,
	131, 7, 45, 2, 2, 131, 26, 3, 2, 2, 2, 132, 133, 7, 47, 2, 2, 133, 28,
	3, 2, 2, 2, 134, 135, 7, 42, 2, 2, 135, 30, 3, 2, 2, 2, 136, 137, 7, 43,
	2, 2, 137, 32, 3, 2, 2, 2, 138, 139, 7, 93, 2, 2, 139, 34, 3, 2, 2, 2,
	140, 141, 7, 95, 2, 2, 141, 36, 3, 2, 2, 2, 142, 143, 7, 125, 2, 2, 143,
	38, 3, 2, 2, 2, 144, 145, 7, 127, 2, 2, 145, 40, 3, 2, 2, 2, 146, 147,
	7, 44, 2, 2, 147, 42, 3, 2, 2, 2, 148, 149, 7, 63, 2, 2, 149, 44, 3, 2,
	2, 2, 150, 151, 7, 99, 2, 2, 151, 152, 7, 101, 2, 2, 152, 153, 7, 101,
	2, 2, 153, 154, 7, 113, 2, 2, 154, 155, 7, 119, 2, 2, 155, 156, 7, 112,
	2, 2, 156, 157, 7, 118, 2, 2, 157, 46, 3, 2, 2, 2, 158, 159, 7, 99, 2,
	2, 159, 160, 7, 117, 2, 2, 160, 161, 7, 117, 2, 2, 161, 162, 7, 103, 2,
	2, 162, 163, 7, 118, 2, 2, 163, 48, 3, 2, 2, 2, 164, 165, 7, 112, 2, 2,
	165, 166, 7, 119, 2, 2, 166, 167, 7, 111, 2, 2, 167, 168, 7, 100, 2, 2,
	168, 169, 7, 103, 2, 2, 169, 170, 7, 116, 2, 2, 170, 50, 3, 2, 2, 2, 171,
	172, 7, 111, 2, 2, 172, 173, 7, 113, 2, 2, 173, 174, 7, 112, 2, 2, 174,
	175, 7, 103, 2, 2, 175, 176, 7, 118, 2, 2, 176, 177, 7, 99, 2, 2, 177,
	178, 7, 116, 2, 2, 178, 179, 7, 123, 2, 2, 179, 52, 3, 2, 2, 2, 180, 182,
	9, 4, 2, 2, 181, 180, 3, 2, 2, 2, 182, 183, 3, 2, 2, 2, 183, 181, 3, 2,
	2, 2, 183, 184, 3, 2, 2, 2, 184, 188, 3, 2, 2, 2, 185, 187, 9, 5, 2, 2,
	186, 185, 3, 2, 2, 2, 187, 190, 3, 2, 2, 2, 188, 186, 3, 2, 2, 2, 188,
	189, 3, 2, 2, 2, 189, 191, 3, 2, 2, 2, 190, 188, 3, 2, 2, 2, 191, 195,
	7, 49, 2, 2, 192, 194, 9, 5, 2, 2, 193, 192, 3, 2, 2, 2, 194, 197, 3, 2,
	2, 2, 195, 193, 3, 2, 2, 2, 195, 196, 3, 2, 2, 2, 196, 199, 3, 2, 2, 2,
	197, 195, 3, 2, 2, 2, 198, 200, 9, 4, 2, 2, 199, 198, 3, 2, 2, 2, 200,
	201, 3, 2, 2, 2, 201, 199, 3, 2, 2, 2, 201, 202, 3, 2, 2, 2, 202, 54, 3,
	2, 2, 2, 203, 205, 9, 4, 2, 2, 204, 203, 3, 2, 2, 2, 205, 206, 3, 2, 2,
	2, 206, 204, 3, 2, 2, 2, 206, 207, 3, 2, 2, 2, 207, 56, 3, 2, 2, 2, 208,
	209, 7, 39, 2, 2, 209, 58, 3, 2, 2, 2, 210, 212, 9, 6, 2, 2, 211, 210,
	3, 2, 2, 2, 212, 213, 3, 2, 2, 2, 213, 211, 3, 2, 2, 2, 213, 214, 3, 2,
	2, 2, 214, 60, 3, 2, 2, 2, 215, 217, 7, 38, 2, 2, 216, 218, 9, 7, 2, 2,
	217, 216, 3, 2, 2, 2, 218, 219, 3, 2, 2, 2, 219, 217, 3, 2, 2, 2, 219,
	220, 3, 2, 2, 2, 220, 224, 3, 2, 2, 2, 221, 223, 9, 8, 2, 2, 222, 221,
	3, 2, 2, 2, 223, 226, 3, 2, 2, 2, 224, 222, 3, 2, 2, 2, 224, 225, 3, 2,
	2, 2, 225, 62, 3, 2, 2, 2, 226, 224, 3, 2, 2, 2, 227, 229, 7, 66, 2, 2,
	228, 230, 9, 7, 2, 2, 229, 228, 3, 2, 2, 2, 230, 231, 3, 2, 2, 2, 231,
	229, 3, 2, 2, 2, 231, 232, 3, 2, 2, 2, 232, 236, 3, 2, 2, 2, 233, 235,
	9, 6, 2, 2, 234, 233, 3, 2, 2, 2, 235, 238, 3, 2, 2, 2, 236, 234, 3, 2,
	2, 2, 236, 237, 3, 2, 2, 2, 237, 64, 3, 2, 2, 2, 238, 236, 3, 2, 2, 2,
	239, 241, 9, 9, 2, 2, 240, 239, 3, 2, 2, 2, 241, 242, 3, 2, 2, 2, 242,
	240, 3, 2, 2, 2, 242, 243, 3, 2, 2, 2, 243, 66, 3, 2, 2, 2, 15, 2, 77,
	183, 188, 195, 201, 206, 213, 219, 224, 231, 236, 242, 3, 8, 2, 2,
}

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'.'", "'to'", "", "", "'vars'", "'print'", "'fail'", "'send'", "'source'",
	"'destination'", "'allocate'", "'+'", "'-'", "'('", "')'", "'['", "']'",
	"'{'", "'}'", "'*'", "'='", "'account'", "'asset'", "'number'", "'monetary'",
	"", "", "'%'",
}

var lexerSymbolicNames = []string{
	"", "", "", "NEWLINE", "WHITESPACE", "VARS", "PRINT", "FAIL", "SEND", "SOURCE",
	"DESTINATION", "ALLOCATE", "OP_ADD", "OP_SUB", "LPAREN", "RPAREN", "LBRACK",
	"RBRACK", "LBRACE", "RBRACE", "ALL", "EQ", "TY_ACCOUNT", "TY_ASSET", "TY_NUMBER",
	"TY_MONETARY", "RATIO", "NUMBER", "PERCENT", "IDENTIFIER", "VARIABLE_NAME",
	"ACCOUNT", "ASSET",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "NEWLINE", "WHITESPACE", "VARS", "PRINT", "FAIL", "SEND",
	"SOURCE", "DESTINATION", "ALLOCATE", "OP_ADD", "OP_SUB", "LPAREN", "RPAREN",
	"LBRACK", "RBRACK", "LBRACE", "RBRACE", "ALL", "EQ", "TY_ACCOUNT", "TY_ASSET",
	"TY_NUMBER", "TY_MONETARY", "RATIO", "NUMBER", "PERCENT", "IDENTIFIER",
	"VARIABLE_NAME", "ACCOUNT", "ASSET",
}

type NumScriptLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

// NewNumScriptLexer produces a new lexer instance for the optional input antlr.CharStream.
//
// The *NumScriptLexer instance produced may be reused by calling the SetInputStream method.
// The initial lexer configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewNumScriptLexer(input antlr.CharStream) *NumScriptLexer {
	l := new(NumScriptLexer)
	lexerDeserializer := antlr.NewATNDeserializer(nil)
	lexerAtn := lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)
	lexerDecisionToDFA := make([]*antlr.DFA, len(lexerAtn.DecisionToState))
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "NumScript.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// NumScriptLexer tokens.
const (
	NumScriptLexerT__0          = 1
	NumScriptLexerT__1          = 2
	NumScriptLexerNEWLINE       = 3
	NumScriptLexerWHITESPACE    = 4
	NumScriptLexerVARS          = 5
	NumScriptLexerPRINT         = 6
	NumScriptLexerFAIL          = 7
	NumScriptLexerSEND          = 8
	NumScriptLexerSOURCE        = 9
	NumScriptLexerDESTINATION   = 10
	NumScriptLexerALLOCATE      = 11
	NumScriptLexerOP_ADD        = 12
	NumScriptLexerOP_SUB        = 13
	NumScriptLexerLPAREN        = 14
	NumScriptLexerRPAREN        = 15
	NumScriptLexerLBRACK        = 16
	NumScriptLexerRBRACK        = 17
	NumScriptLexerLBRACE        = 18
	NumScriptLexerRBRACE        = 19
	NumScriptLexerALL           = 20
	NumScriptLexerEQ            = 21
	NumScriptLexerTY_ACCOUNT    = 22
	NumScriptLexerTY_ASSET      = 23
	NumScriptLexerTY_NUMBER     = 24
	NumScriptLexerTY_MONETARY   = 25
	NumScriptLexerRATIO         = 26
	NumScriptLexerNUMBER        = 27
	NumScriptLexerPERCENT       = 28
	NumScriptLexerIDENTIFIER    = 29
	NumScriptLexerVARIABLE_NAME = 30
	NumScriptLexerACCOUNT       = 31
	NumScriptLexerASSET         = 32
)
